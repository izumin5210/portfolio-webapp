/* eslint-disable */
import * as graphql from "./graphql";
import type { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

const documents = {
  '\n      query BlogArticleTestQuery @relay_test_operation {\n        articleEntryByPath(path: "test-path") {\n          ...BlogArticle\n        }\n      }\n    ':
    graphql.BlogArticleTestQueryDocument,
  "\n      fragment BlogArticle on ArticleEntry {\n        title\n        body\n        publishedOn\n        updatedOn\n        tags {\n          name\n          displayName\n        }\n      }\n    ":
    graphql.BlogArticleFragmentDoc,
  "\n  query BlogArticleOgImagePageQuery($articlePath: String!) {\n    articleEntryByPath(path: $articlePath) {\n      ...BlogArticleOgImagePageCard\n    }\n  }\n":
    graphql.BlogArticleOgImagePageQueryDocument,
  "\n      fragment BlogArticleOgImagePageCard on ArticleEntry {\n        title\n        tags {\n          name\n          displayName\n        }\n        publishedOn\n      }\n    ":
    graphql.BlogArticleOgImagePageCardFragmentDoc,
  "\n  query BlogArticlePageQuery($articlePath: String!) {\n    articleEntryByPath(path: $articlePath) {\n      ...BlogArticlePageHead\n      ...BlogArticle\n    }\n  }\n":
    graphql.BlogArticlePageQueryDocument,
  "\n      fragment BlogArticlePageHead on ArticleEntry {\n        title\n        path\n        metaDescription\n      }\n    ":
    graphql.BlogArticlePageHeadFragmentDoc,
  "\n  query EntriesPageQuery($cursor: String, $count: Int!, $tags: [String!]!, $filteredByTags: Boolean!) {\n    ...PickedEntryListEntries\n    ...EntryListEntries @arguments(cursor: $cursor, count: $count) @skip(if: $filteredByTags)\n    ...EntryListEntriesByTags @arguments(cursor: $cursor, count: $count, tags: $tags) @include(if: $filteredByTags)\n  }\n":
    graphql.EntriesPageQueryDocument,
  "\n      fragment EntryItem on Entry {\n        ... on ArticleEntry {\n          title\n          path\n          # tags {\n          #   name\n          #   ...EntryItemTag\n          # }\n          publishedOn\n          source {\n            name\n          }\n        }\n        ... on ExternalArticleEntry {\n          title\n          url\n          # tags {\n          #   name\n          #   ...EntryItemTag\n          # }\n          publishedOn\n          source {\n            name\n          }\n        }\n        ... on SlideEntry {\n          title\n          url\n          # tags {\n          #   name\n          #   ...EntryItemTag\n          # }\n          publishedOn\n          source {\n            name\n          }\n        }\n        ... on OSSEntry {\n          title\n          url\n          # tags {\n          #   name\n          #   ...EntryItemTag\n          # }\n          publishedOn\n          source {\n            name\n          }\n        }\n        ... on PodcastEntry {\n          title\n          url\n          # tags {\n          #   name\n          #   ...EntryItemTag\n          # }\n          publishedOn\n          source {\n            name\n          }\n        }\n      }\n    ":
    graphql.EntryItemFragmentDoc,
  '\n      fragment EntryListEntries on Query\n      @refetchable(queryName: "EntryListPaginationQuery")\n      @argumentDefinitions(count: { type: "Int!" }, cursor: { type: "String" }) {\n        entries(first: $count, after: $cursor) @connection(key: "EntryListEntries_entries") {\n          edges {\n            __typename\n          }\n          ...EntryListView\n        }\n      }\n    ':
    graphql.EntryListEntriesFragmentDoc,
  '\n      fragment EntryListEntriesByTags on Query\n      @refetchable(queryName: "EntryListFilteredByTagsPaginationQuery")\n      @argumentDefinitions(count: { type: "Int!" }, cursor: { type: "String" }, tags: { type: "[String!]!" }) {\n        entriesByTags(first: $count, after: $cursor, tags: $tags) @connection(key: "EntryListEntries_entriesByTags") {\n          edges {\n            __typename\n          }\n          ...EntryListView\n        }\n      }\n    ':
    graphql.EntryListEntriesByTagsFragmentDoc,
  "\n      fragment EntryListView on EntryConnection {\n        edges {\n          node {\n            __typename\n            ... on ArticleEntry {\n              publishedOn\n            }\n            ... on ExternalArticleEntry {\n              publishedOn\n            }\n            ... on SlideEntry {\n              publishedOn\n            }\n            ... on OSSEntry {\n              publishedOn\n            }\n            ... on PodcastEntry {\n              publishedOn\n            }\n            ...EntryItem\n          }\n        }\n      }\n    ":
    graphql.EntryListViewFragmentDoc,
  "\n      fragment PickedEntryListEntries on Query {\n        pickedEntries {\n          ... on ArticleEntry {\n            title\n            path\n          }\n          ... on ExternalArticleEntry {\n            title\n            url\n            source {\n              name\n            }\n          }\n          ... on SlideEntry {\n            title\n            url\n            source {\n              name\n            }\n          }\n          ... on OSSEntry {\n            title\n            url\n            source {\n              name\n            }\n          }\n          ... on PodcastEntry {\n            title\n            url\n            source {\n              name\n            }\n          }\n        }\n      }\n    ":
    graphql.PickedEntryListEntriesFragmentDoc,
};

export function gql(
  source: '\n      query BlogArticleTestQuery @relay_test_operation {\n        articleEntryByPath(path: "test-path") {\n          ...BlogArticle\n        }\n      }\n    '
): typeof documents['\n      query BlogArticleTestQuery @relay_test_operation {\n        articleEntryByPath(path: "test-path") {\n          ...BlogArticle\n        }\n      }\n    '];
export function gql(
  source: "\n      fragment BlogArticle on ArticleEntry {\n        title\n        body\n        publishedOn\n        updatedOn\n        tags {\n          name\n          displayName\n        }\n      }\n    "
): typeof documents["\n      fragment BlogArticle on ArticleEntry {\n        title\n        body\n        publishedOn\n        updatedOn\n        tags {\n          name\n          displayName\n        }\n      }\n    "];
export function gql(
  source: "\n  query BlogArticleOgImagePageQuery($articlePath: String!) {\n    articleEntryByPath(path: $articlePath) {\n      ...BlogArticleOgImagePageCard\n    }\n  }\n"
): typeof documents["\n  query BlogArticleOgImagePageQuery($articlePath: String!) {\n    articleEntryByPath(path: $articlePath) {\n      ...BlogArticleOgImagePageCard\n    }\n  }\n"];
export function gql(
  source: "\n      fragment BlogArticleOgImagePageCard on ArticleEntry {\n        title\n        tags {\n          name\n          displayName\n        }\n        publishedOn\n      }\n    "
): typeof documents["\n      fragment BlogArticleOgImagePageCard on ArticleEntry {\n        title\n        tags {\n          name\n          displayName\n        }\n        publishedOn\n      }\n    "];
export function gql(
  source: "\n  query BlogArticlePageQuery($articlePath: String!) {\n    articleEntryByPath(path: $articlePath) {\n      ...BlogArticlePageHead\n      ...BlogArticle\n    }\n  }\n"
): typeof documents["\n  query BlogArticlePageQuery($articlePath: String!) {\n    articleEntryByPath(path: $articlePath) {\n      ...BlogArticlePageHead\n      ...BlogArticle\n    }\n  }\n"];
export function gql(
  source: "\n      fragment BlogArticlePageHead on ArticleEntry {\n        title\n        path\n        metaDescription\n      }\n    "
): typeof documents["\n      fragment BlogArticlePageHead on ArticleEntry {\n        title\n        path\n        metaDescription\n      }\n    "];
export function gql(
  source: "\n  query EntriesPageQuery($cursor: String, $count: Int!, $tags: [String!]!, $filteredByTags: Boolean!) {\n    ...PickedEntryListEntries\n    ...EntryListEntries @arguments(cursor: $cursor, count: $count) @skip(if: $filteredByTags)\n    ...EntryListEntriesByTags @arguments(cursor: $cursor, count: $count, tags: $tags) @include(if: $filteredByTags)\n  }\n"
): typeof documents["\n  query EntriesPageQuery($cursor: String, $count: Int!, $tags: [String!]!, $filteredByTags: Boolean!) {\n    ...PickedEntryListEntries\n    ...EntryListEntries @arguments(cursor: $cursor, count: $count) @skip(if: $filteredByTags)\n    ...EntryListEntriesByTags @arguments(cursor: $cursor, count: $count, tags: $tags) @include(if: $filteredByTags)\n  }\n"];
export function gql(
  source: "\n      fragment EntryItem on Entry {\n        ... on ArticleEntry {\n          title\n          path\n          # tags {\n          #   name\n          #   ...EntryItemTag\n          # }\n          publishedOn\n          source {\n            name\n          }\n        }\n        ... on ExternalArticleEntry {\n          title\n          url\n          # tags {\n          #   name\n          #   ...EntryItemTag\n          # }\n          publishedOn\n          source {\n            name\n          }\n        }\n        ... on SlideEntry {\n          title\n          url\n          # tags {\n          #   name\n          #   ...EntryItemTag\n          # }\n          publishedOn\n          source {\n            name\n          }\n        }\n        ... on OSSEntry {\n          title\n          url\n          # tags {\n          #   name\n          #   ...EntryItemTag\n          # }\n          publishedOn\n          source {\n            name\n          }\n        }\n        ... on PodcastEntry {\n          title\n          url\n          # tags {\n          #   name\n          #   ...EntryItemTag\n          # }\n          publishedOn\n          source {\n            name\n          }\n        }\n      }\n    "
): typeof documents["\n      fragment EntryItem on Entry {\n        ... on ArticleEntry {\n          title\n          path\n          # tags {\n          #   name\n          #   ...EntryItemTag\n          # }\n          publishedOn\n          source {\n            name\n          }\n        }\n        ... on ExternalArticleEntry {\n          title\n          url\n          # tags {\n          #   name\n          #   ...EntryItemTag\n          # }\n          publishedOn\n          source {\n            name\n          }\n        }\n        ... on SlideEntry {\n          title\n          url\n          # tags {\n          #   name\n          #   ...EntryItemTag\n          # }\n          publishedOn\n          source {\n            name\n          }\n        }\n        ... on OSSEntry {\n          title\n          url\n          # tags {\n          #   name\n          #   ...EntryItemTag\n          # }\n          publishedOn\n          source {\n            name\n          }\n        }\n        ... on PodcastEntry {\n          title\n          url\n          # tags {\n          #   name\n          #   ...EntryItemTag\n          # }\n          publishedOn\n          source {\n            name\n          }\n        }\n      }\n    "];
export function gql(
  source: '\n      fragment EntryListEntries on Query\n      @refetchable(queryName: "EntryListPaginationQuery")\n      @argumentDefinitions(count: { type: "Int!" }, cursor: { type: "String" }) {\n        entries(first: $count, after: $cursor) @connection(key: "EntryListEntries_entries") {\n          edges {\n            __typename\n          }\n          ...EntryListView\n        }\n      }\n    '
): typeof documents['\n      fragment EntryListEntries on Query\n      @refetchable(queryName: "EntryListPaginationQuery")\n      @argumentDefinitions(count: { type: "Int!" }, cursor: { type: "String" }) {\n        entries(first: $count, after: $cursor) @connection(key: "EntryListEntries_entries") {\n          edges {\n            __typename\n          }\n          ...EntryListView\n        }\n      }\n    '];
export function gql(
  source: '\n      fragment EntryListEntriesByTags on Query\n      @refetchable(queryName: "EntryListFilteredByTagsPaginationQuery")\n      @argumentDefinitions(count: { type: "Int!" }, cursor: { type: "String" }, tags: { type: "[String!]!" }) {\n        entriesByTags(first: $count, after: $cursor, tags: $tags) @connection(key: "EntryListEntries_entriesByTags") {\n          edges {\n            __typename\n          }\n          ...EntryListView\n        }\n      }\n    '
): typeof documents['\n      fragment EntryListEntriesByTags on Query\n      @refetchable(queryName: "EntryListFilteredByTagsPaginationQuery")\n      @argumentDefinitions(count: { type: "Int!" }, cursor: { type: "String" }, tags: { type: "[String!]!" }) {\n        entriesByTags(first: $count, after: $cursor, tags: $tags) @connection(key: "EntryListEntries_entriesByTags") {\n          edges {\n            __typename\n          }\n          ...EntryListView\n        }\n      }\n    '];
export function gql(
  source: "\n      fragment EntryListView on EntryConnection {\n        edges {\n          node {\n            __typename\n            ... on ArticleEntry {\n              publishedOn\n            }\n            ... on ExternalArticleEntry {\n              publishedOn\n            }\n            ... on SlideEntry {\n              publishedOn\n            }\n            ... on OSSEntry {\n              publishedOn\n            }\n            ... on PodcastEntry {\n              publishedOn\n            }\n            ...EntryItem\n          }\n        }\n      }\n    "
): typeof documents["\n      fragment EntryListView on EntryConnection {\n        edges {\n          node {\n            __typename\n            ... on ArticleEntry {\n              publishedOn\n            }\n            ... on ExternalArticleEntry {\n              publishedOn\n            }\n            ... on SlideEntry {\n              publishedOn\n            }\n            ... on OSSEntry {\n              publishedOn\n            }\n            ... on PodcastEntry {\n              publishedOn\n            }\n            ...EntryItem\n          }\n        }\n      }\n    "];
export function gql(
  source: "\n      fragment PickedEntryListEntries on Query {\n        pickedEntries {\n          ... on ArticleEntry {\n            title\n            path\n          }\n          ... on ExternalArticleEntry {\n            title\n            url\n            source {\n              name\n            }\n          }\n          ... on SlideEntry {\n            title\n            url\n            source {\n              name\n            }\n          }\n          ... on OSSEntry {\n            title\n            url\n            source {\n              name\n            }\n          }\n          ... on PodcastEntry {\n            title\n            url\n            source {\n              name\n            }\n          }\n        }\n      }\n    "
): typeof documents["\n      fragment PickedEntryListEntries on Query {\n        pickedEntries {\n          ... on ArticleEntry {\n            title\n            path\n          }\n          ... on ExternalArticleEntry {\n            title\n            url\n            source {\n              name\n            }\n          }\n          ... on SlideEntry {\n            title\n            url\n            source {\n              name\n            }\n          }\n          ... on OSSEntry {\n            title\n            url\n            source {\n              name\n            }\n          }\n          ... on PodcastEntry {\n            title\n            url\n            source {\n              name\n            }\n          }\n        }\n      }\n    "];

export function gql(source: string): unknown;
export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<
  infer TType,
  any
>
  ? TType
  : never;
